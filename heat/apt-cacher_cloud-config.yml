heat_template_version: 2013-05-23

description: dummy server

parameters:
  kp_name:
    type: string
    description: SSH Keypair.
  f_name:
    type: string
    description: Instances flavor.
  img_name:
    type: string
    description: Instance image.
  net_id:
    type: string
    description: Internal network ID.
  subnet_id:
    type: string
    description: Internal subnet ID.
  floating_id:
    type: string
    description: Floating subnet ID.
  #Metadata
  description:
    type: string
    description: (Metadata) Description for the created stack.
  mail:
    type: string
    description: (Metadata) Mail of the user.
  validity:
    type: string
    description: (Metadata) Max validity of the stack.


resources:
  server1:
    type: OS::Nova::Server
    properties:
      image: { get_param: img_name }
      flavor: { get_param: f_name }
      key_name: { get_param: kp_name }
      networks:
        - port: { get_resource: server1_port }
      user_data: |
        #cloud-config

        bootcmd:
          - [ cloud-init-per, once, puppet-repo-get, wget , "https://apt.puppetlabs.com/puppetlabs-release-precise.deb", "-O", "/tmp/puppet-precise.deb" ]
          - [ cloud-init-per, once, puppet-repo-install, dpkg , -i, "/tmp/puppet-precise.deb" ]

        package_update: true
        packages:
          - puppet
        final_message: "$TIMESTAMP: Puppet ready after $UPTIME seconds."

  cacher_secgroup:
    type: AWS::EC2::SecurityGroup
    properties:
      GroupDescription: "apt-cacher"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: "3142"
          ToPort: "3142"
        - IpProtocol: "tcp"
          CidrIp: "0.0.0.0/0"
          FromPort: "22"
          ToPort: "22"

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: net_id }
      security_groups: [ Ref: cacher_secgroup ]
      fixed_ips:
        - subnet_id: { get_param: subnet_id }

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: floating_id}
      port_id: { get_resource: server1_port }

outputs:
  Meta_Description:
    description: Description Metadata
    value: 
      str_replace:
        template: sub
        params:
          sub: { get_param: description }
  Meta_Mail:
    description: Mail Metadata
    value: 
      str_replace:
        template: sub
        params:
          sub: { get_param: mail }
  Meta_Validity:
    description: Validity Metadata
    value:
      str_replace:
        template: sub
        params:
          sub: { get_param: validity }
  WebsiteURL:
    description: service ip
    value:
      str_replace:
        template: host
        params:
          host: { get_attr: [server1_floating_ip, floating_ip_address] }
